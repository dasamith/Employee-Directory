{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","handletyping","event","console","log","target","value","filtered","i","state","employees","length","name","substring","push","setState","filteredEmployees","search","this","pplToDisplay","className","onChange","map","singleDude","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2IAAAA,EAAOC,QAAU,IAA0B,kC,8HCqE5BC,G,8DA5Db,aAAe,IAAD,8BACZ,gBAQFC,aAAe,SAACC,GACdC,QAAQC,IAAI,gBAAiBF,EAAMG,OAAOC,OAI1C,IAFA,IAAIC,EAAW,GAENC,EAAI,EAAGA,EAAI,EAAKC,MAAMC,UAAUC,OAAQH,IAC/CL,QAAQC,IAAI,mBAAoB,EAAKK,MAAMC,UAAUF,IACjD,EAAKC,MAAMC,UAAUF,GAAGI,KAAKC,UAAU,EAAGX,EAAMG,OAAOC,MAAMK,UAAYT,EAAMG,OAAOC,QACxFH,QAAQC,IAAI,uBAAwB,EAAKK,MAAMC,UAAUF,IACzDD,EAASO,KAAK,EAAKL,MAAMC,UAAUF,KAIvCL,QAAQC,IAAI,oBAAqBG,GACjC,EAAKQ,SAAS,CAAEC,kBAAmBT,KArBnC,EAAKE,MAAQ,CACXC,UAAW,CAAC,CAAEE,KAAM,OAAS,CAAEA,KAAM,SAAW,CAAEA,KAAM,WACxDI,kBAAmB,GACnBC,OAAQ,IALE,E,qDA+BZd,QAAQC,IAAI,oBAAqBc,KAAKT,OAEtC,IAAIU,EAAeD,KAAKT,MAAMC,UAQ9B,OAPIQ,KAAKT,MAAMO,kBAAkBL,OAAS,IACxCQ,EAAeD,KAAKT,MAAMO,mBAQ1B,yBAAMI,UAAU,OACd,mDACA,sCACA,2BAAOC,SAAUH,KAAKjB,eAGpBkB,EAAaG,KAAI,SAAUC,GACzB,OACE,gCAAMA,EAAWX,c,GArDbY,IAAMC,YCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.e9b3dbd4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { render } from 'react-dom';\n\n// starter config code\n\nclass App extends React.Component {\n\n  constructor() {\n    super()\n    this.state = {\n      employees: [{ name: 'tom' }, { name: 'amith' }, { name: 'arnold' }],\n      filteredEmployees: [],\n      search: ''\n    }\n  }\n\n  handletyping = (event) => {\n    console.log(\"we are typing\", event.target.value)\n\n    var filtered = []\n\n    for (let i = 0; i < this.state.employees.length; i++) {\n      console.log('u start with a ?', this.state.employees[i])\n      if (this.state.employees[i].name.substring(0, event.target.value.length) === event.target.value) {\n        console.log('we found a match!!!!', this.state.employees[i])\n        filtered.push(this.state.employees[i])\n      }\n    }\n\n    console.log(\"new filrwe people\", filtered)\n    this.setState({ filteredEmployees: filtered })\n\n  }\n\n\n\n  render() {\n    // third zone for u!! you can do any js code in here or console.log\n    console.log('this is our state', this.state)\n\n    var pplToDisplay = this.state.employees\n    if (this.state.filteredEmployees.length > 0) {\n      pplToDisplay = this.state.filteredEmployees\n    }\n\n\n\n\n    return (\n      // html section\n      < div className=\"App\" >\n        <h1> Employee Directory</h1>\n        <p>Search:</p>\n        <input onChange={this.handletyping}></input>\n\n        {\n          pplToDisplay.map(function (singleDude) {\n            return (\n              <h1> {singleDude.name}</h1>\n            )\n          })\n        }\n      </div >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}